{"version":3,"sources":["assets/circle.png","assets/proj1.png","assets/proj2.png","assets/proj3.png","logo.svg","About.jsx","Proj.js","Exp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","props","React","useState","descrip1","words","setWords","className","src","image","alt","name","href","onClick","descrip2","descrip3","descrip4","contact","Proj","title","descrip","Exp","date","App","circle","proj1","link","proj2","proj3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,wECA3CD,EAAOC,QAAU,IAA0B,kC,iLCG5B,SAASC,EAAMC,GAAQ,IAAD,EACPC,IAAMC,SAASF,EAAMG,UADd,mBAC1BC,EAD0B,KACnBC,EADmB,KAoBjC,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,UACX,yBAAKC,IAAKP,EAAMQ,MAAOF,UAAU,QAAQG,IAAI,WAC7C,4BAAKT,EAAMU,MACX,uBAAGC,KAAK,IAAIC,QAtBxB,WACIP,EAASL,EAAMG,YAqBP,cAGA,uBAAGQ,KAAK,IAAIC,QAtBxB,WACIP,EAASL,EAAMa,YAqBP,cAGA,uBAAGF,KAAK,IAAIC,QAtBxB,WACIP,EAASL,EAAMc,YAqBP,cAGA,uBAAGH,KAAK,IAAIC,QAtBxB,WACIP,EAASL,EAAMe,YAqBP,eAIJ,yBAAKT,UAAU,WAAWF,GAC1B,yBAAKE,UAAU,WAAWN,EAAMgB,U,MCvC7B,SAASC,EAAKjB,GAEzB,OACI,yBAAKM,UAAU,QACX,yBAAKC,IAAKP,EAAMQ,MAAOF,UAAU,QAAQG,IAAI,WAC7C,yBAAKH,UAAU,QAAQN,EAAMkB,OAC7B,yBAAKZ,UAAU,WAAWN,EAAMmB,U,MCN7B,SAASC,EAAIpB,GAExB,OACI,yBAAKM,UAAU,OACX,yBAAKA,UAAU,UAAUN,EAAMkB,OAC/B,yBAAKZ,UAAU,WAAWN,EAAMmB,SAChC,yBAAKb,UAAU,QAAQN,EAAMqB,O,oEC6D1BC,MA3Df,WACE,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,SACf,kBAAC,EAAD,CACEE,MAAQe,IACRb,KAAK,YACLP,SAAS,KACTU,SAAS,QACTC,SAAS,OACTC,SAAS,OACTC,QAAQ,YAGV,6BACE,yBAAKV,UAAU,YACb,kBAAC,EAAD,CACEE,MAAOgB,IACPd,KAAK,SACLS,QAAQ,iBACRM,KAAK,KAEP,kBAAC,EAAD,CACEjB,MAAOkB,IACPhB,KAAK,SACLS,QAAQ,iBACRM,KAAK,KAEP,kBAAC,EAAD,CACEjB,MAAOmB,IACPjB,KAAK,SACLS,QAAQ,iBACRM,KAAK,MAGT,yBAAKnB,UAAU,eACb,kBAAC,EAAD,CACEY,MAAM,QACNG,KAAK,OACLF,QAAQ,kBAEV,kBAAC,EAAD,CACED,MAAM,QACNG,KAAK,OACLF,QAAQ,kBAEV,kBAAC,EAAD,CACED,MAAM,QACNG,KAAK,OACLF,QAAQ,sBChDAS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eae0cffc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.9296916b.png\";","module.exports = __webpack_public_path__ + \"static/media/proj1.1bb09bf7.png\";","module.exports = __webpack_public_path__ + \"static/media/proj2.3ec3a932.png\";","module.exports = __webpack_public_path__ + \"static/media/proj3.4b32dcf1.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./About.css\";\n\nexport default function About(props) {\n    const [words, setWords] = React.useState(props.descrip1);\n\n    function handleClick1() {\n        setWords(props.descrip1);\n    }\n    function handleClick2() {\n        setWords(props.descrip2);\n    }\n    function handleClick3() {\n        setWords(props.descrip3);\n    }\n    function handleClick4() {\n        setWords(props.descrip4);\n    }\n\n    /* function renderDescrip() {\n        if\n    } */\n\n    return (\n        <div className=\"About\">\n            <div className=\"header\">\n                <img src={props.image} className=\"image\" alt=\"illust\" />\n                <h1>{props.name}</h1>\n                <a href=\"#\" onClick={handleClick1}>\n                    Click me 1\n                </a>\n                <a href=\"#\" onClick={handleClick2}>\n                    Click me 2\n                </a>\n                <a href=\"#\" onClick={handleClick3}>\n                    Click me 3\n                </a>\n                <a href=\"#\" onClick={handleClick4}>\n                    Click me 4\n                </a>\n            </div>\n            <div className=\"descrip\">{words}</div> \n            <div className=\"contact\">{props.contact}</div> \n            {/* {props.funfacts.map((fact, i) => (\n                <h4>\n                Fun fact {i + 1}: {fact}\n                </h4>\n            ))} */}\n        </div>\n    );\n}\n\n/* function Descrip(props) {\n    const whichDescrip = props.whichDescrip;\n    if ()\n\n}\n\nfunction CoderDescrip(props) {\n\n}\n\nfunction CreatorDescrip(props) {\n\n}\n\nfunction WriterDescrip(props) {\n\n}\n */","import React from \"react\";\nimport \"./Proj.css\";\n\nexport default function Proj(props) {\n\n    return (\n        <div className=\"Proj\">\n            <img src={props.image} className=\"image\" alt=\"illust\" />\n            <div className=\"name\">{props.title}</div>\n            <div className=\"descrip\">{props.descrip}</div> \n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./Exp.css\";\n\nexport default function Exp(props) {\n\n    return (\n        <div className=\"Exp\">\n            <div className=\"header\">{props.title}</div>\n            <div className=\"descrip\">{props.descrip}</div> \n            <div className=\"date\">{props.date}</div> \n        </div>\n    );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Ab from './About';\nimport Proj from './Proj'\nimport Exp from './Exp'\nimport circle from \"./assets/circle.png\";\nimport proj1 from \"./assets/proj1.png\";\nimport proj2 from \"./assets/proj2.png\";\nimport proj3 from \"./assets/proj3.png\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"About\">\n      <Ab\n        image ={circle}\n        name=\"isabel li\"\n        descrip1=\"hi\"\n        descrip2=\"hello\"\n        descrip3=\"hiya\"\n        descrip4=\"welp\"\n        contact=\"say hi\"\n      />\n      </div>\n      <div>\n        <div className=\"Projects\">\n          <Proj \n            image={proj1}\n            name=\"proj 1\"\n            descrip=\"proj 1 descrip\"\n            link=\"\"\n          />\n          <Proj \n            image={proj2}\n            name=\"proj 2\"\n            descrip=\"proj 2 descrip\"\n            link=\"\"\n          />\n          <Proj \n            image={proj3}\n            name=\"proj 3\"\n            descrip=\"proj 3 descrip\"\n            link=\"\"\n          />\n        </div>\n        <div className=\"Experiences\">\n          <Exp \n            title=\"exp 1\"\n            date=\"2000\"\n            descrip=\"exp 1 descrip\"\n          />\n          <Exp \n            title=\"exp 2\"\n            date=\"2000\"\n            descrip=\"exp 2 descrip\"\n          />\n          <Exp \n            title=\"exp 3\"\n            date=\"2000\"\n            descrip=\"exp 3 descrip\"\n          />\n        \n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}